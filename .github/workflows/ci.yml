name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    defaults:
      run:
        working-directory: apps/api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          pip install poetry

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root

      - name: Run backend tests
        run: |
          poetry run pytest src/tests

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          # cache: "pnpm"

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Check pnpm version
        run: pnpm --version

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint || true
        # Remove '|| true' if you want lint to fail the build

      - name: Build
        run: pnpm build

  e2e:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          pip install poetry
        working-directory: apps/api

      - name: Install backend dependencies
        run: |
          poetry install --no-interaction --no-root
        working-directory: apps/api

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Check pnpm version
        run: pnpm --version

      - name: Install frontend dependencies
        run: pnpm install
        working-directory: apps/web

      - name: Start backend
        run: nohup poetry run uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        working-directory: apps/api

      - name: Start frontend
        run: |
          export PORT=3000
          export NODE_ENV=production
          nohup pnpm start &
        working-directory: apps/web

      - name: Wait for services
        run: |
          sleep 30
          curl -f http://localhost:8000/docs || exit 1
          curl -f http://localhost:3000 || exit 1

      - name: Run e2e tests
        run: poetry run pytest ../../tests/e2e
        working-directory: apps/api
